{"componentChunkName":"component---src-templates-article-tsx","path":"/site-estatico-github-pages-actions/","result":{"data":{"article":{"excerpt":"Uma das minhas metas de 2020 é conseguir manter um blog e tomada essa decisão comecei a projetar como ele seria publicado. Avaliei static generators, WordPress…","html":"<p>Uma das minhas metas de 2020 é conseguir manter um blog e tomada essa decisão comecei a projetar como ele seria publicado. Avaliei <a href=\"/tags/static-web-sites\">static generators</a>, WordPress, Medium e outras plataformas <em>plug-and-play</em> mas nenhuma me dava a liberdade para customizar como um bom desenvolvedor gosta, não restou dúvidas, usar um gerador estático como o <a href=\"https://www.gatsbyjs.org/\">Gatsby</a> era a escolha mais inteligente para um desenvolvedor React.</p>\n<p>Passada a fase de estudos, concepção, horas de diversão montando um tema que atendesse minhas necessidades, começou a jornada que imaginava ser um problema ao optar por construir um blog fora de grandes plataformas: Como e onde publicar? Estudei alguns provedores como por exemplo o S3 da Amazon mas enquanto fazia o último <em>commit</em> de meus ajustes no tema a resposta chegou em forma de pergunta: Por que não uso o próprio <a href=\"https://github.com/diegocosta\">github</a> como servidor de arquivos?</p>\n<h2>Configurações Iniciais</h2>\n<p>Existem diversas formas de configurar a publicação de uma página usando o <a href=\"https://pages.github.com/\">github pages</a>, no meu caso optei por usar a branch master como versão de <strong>produção</strong> do blog e para isso é necessário ir nas configurações de seu repositório, rolar até a sessão <strong>GitHub Pages</strong> e escolher <em>master branch</em> como <strong>Source</strong>. Nessa mesma sessão você consegue adicionar um <a href=\"https://help.github.com/en/github/working-with-github-pages/configuring-a-custom-domain-for-your-github-pages-site\">domínio customizado</a> e ativar o HTTPS.</p>\n<h2>Publicação</h2>\n<p>Ao usar um gerador estático você muito provavelmente precisa executar um script de build para gerar a versão final do seu site, no Gatsby esse comando é <code class=\"language-text\">gatsby build</code> e ele cria um diretório <code class=\"language-text\">public</code> em seu projeto. Aqui entra em cena o <a href=\"https://github.com/features/actions\">Github Actions</a> permitindo você automatizar a publicação de seu site a cada novo <em>push</em> e para iniciar com esse recurso você só precisa criar um arquivo <code class=\"language-text\">.yml</code> dentro do seguinte diretório em seu projeto: <code class=\"language-text\">.github/workflows/qualquer-nome.yml</code> com a seguinte estrutura:</p>\n<p>Primeiramente definimos um nome para o workflow, o meu chamei de <code class=\"language-text\">Deploy on Github Pages</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yml line-numbers\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy on Github Pages</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>O próximo passo é definir qual evento será responsável por disparar os processos, como eu estou publicando meus arquivos de desenvolvimento na branch <em>develop</em> eu quero que a trigger seja disparada quando eu realizar um novo push nela.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yml line-numbers\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy on Github Pages\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> develop</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Agora chega a parte onde a mágica acontece, vamos definir o trabalho a ser executado, para isso eu usei duas <a href=\"https://help.github.com/en/actions/automating-your-workflow-with-github-actions/about-actions\">actions</a> da comunidade para atingir meus objetivos:</p>\n<p>O <a href=\"https://github.com/Borales/actions-yarn\">borales/actions-yarn</a> tem como função executar scripts do package.json usando o yarn, com ela eu instalo as dependências e executo o build da aplicação. Sua configuração é bastante simples, só precisamos informar qual script será executado no atributo <code class=\"language-text\">with.cmd</code>.</p>\n<p>Enquanto o <a href=\"https://github.com/peaceiris/actions-gh-pages\">peaceiris/actions-gh-pages</a> é responsável por pegar um diretório e mover para uma branch, para isso precisamos informar o diretório em <code class=\"language-text\">env.PUBLISH_DIR</code>, a branch destino em <code class=\"language-text\">env.PUBLISH_BRANCH</code> e a <a href=\"https://developer.github.com/v3/guides/managing-deploy-keys/\">chave de deploy</a> em <code class=\"language-text\">env.ACTIONS_DEPLOY_KEY</code>.</p>\n<p>O arquivo <code class=\"language-text\">.yml</code> final ficou assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yml line-numbers\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy on Github Pages\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> develop\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v1\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> borales/actions<span class=\"token punctuation\">-</span>yarn@v2.0.0\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">cmd</span><span class=\"token punctuation\">:</span> install\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> borales/actions<span class=\"token punctuation\">-</span>yarn@v2.0.0\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">cmd</span><span class=\"token punctuation\">:</span> build\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> peaceiris/actions<span class=\"token punctuation\">-</span>gh<span class=\"token punctuation\">-</span>pages@v2\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">ACTIONS_DEPLOY_KEY</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.ACTIONS_DEPLOY_KEY <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">PUBLISH_BRANCH</span><span class=\"token punctuation\">:</span> master\n          <span class=\"token key atrule\">PUBLISH_DIR</span><span class=\"token punctuation\">:</span> ./public</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Como configurar chaves de deploy</h2>\n<p>Se assim como eu, você precisou configurar pela primeira vez chaves de deploy no Github, vem que eu te ajudo.</p>\n<p>Primeiro você precisa gerar uma nova chave SSH usando o comando abaixo em seu terminal:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">ssh-keygen -t rsa -b <span class=\"token number\">4096</span> -C <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">git</span> config user.email<span class=\"token variable\">)</span></span>\"</span> -f gh-pages -N <span class=\"token string\">\"\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Se tudo deu certo, você vai receber o retorno abaixo:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">Generating public/private rsa key pair.\nYour identification has been saved <span class=\"token keyword\">in</span> gh-pages.\nYour public key has been saved <span class=\"token keyword\">in</span> gh-pages.pub.\nThe key fingerprint is:\nSHA256:TizUu<span class=\"token punctuation\">..</span>. diego@<span class=\"token punctuation\">..</span>.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>O próximo passo é configurar a chave publica, para isso vá nas configurações do seu repositório, clique em <strong>Deploy Keys</strong> e adicione o conteúdo do arquivo <code class=\"language-text\">gh-pages.pub</code> no campo <em>Key</em>, em <em>title</em> deve informar o nome da chave que você definiu no <code class=\"language-text\">.yml</code> (em nosso caso é <code class=\"language-text\">ACTIONS_DEPLOY_KEY</code>) e deve marcar <em>Allow write access</em> para conseguirmos fazer um <em>push</em> com essa <em>key</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\"><span class=\"token function\">cat</span> gh-pages.pub  <span class=\"token comment\"># o cat serve também pra ver o conteúdo de um arquivo.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Por fim devemos informar também a chave privada, ainda nas configurações escolha <strong>Secrets</strong> e adicione uma nova com o conteúdo do arquivo <code class=\"language-text\">gh-pages</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\"><span class=\"token function\">cat</span> gh-pages</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>E isso é tudo que você precisa fazer para ter um blog com deploy automatizado sem custos no Github.</p>\n<p>✅ Complete job.</p>","fields":{"readingTime":{"minutes":3.685}},"frontmatter":{"title":"Como publicar um site estático no Github Pages usando Actions","date":"12/01/2019","description":"Isso é tudo que você precisa fazer para ter um blog com deploy automatizado sem custos com o Github.","tags":["Static Web Sites","Github","Deploy","Gatsby"],"lang":"pt"}}},"pageContext":{"slug":"/site-estatico-github-pages-actions/","previous":null,"next":{"fields":{"slug":"/notion/"},"frontmatter":{"tags":["Notion","Note","Organizacao","Organize","App"],"title":"Notion - O app para todas as horas'"}}}}}